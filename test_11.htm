<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>anilibria player</title>
    <!-- Подключаем Video.js стили -->
    <link href="https://vjs.zencdn.net/8.10.0/video-js.css" rel="stylesheet" />
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #1a1a1a;
            color: #ffffff;
            overflow: hidden;
        }
        .container {
            display: flex;
            width: 100vw;
            height: 100vh;
            gap: 10px;
        }
        .video-container {
            flex: 5;
            background-color: #2c2c2c;
            border-radius: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
            max-height: 100vh;
        }
        #my-video {
            height: 100%;
        }
        .video-js {
            width: 100%;
            max-height: 100vh;
            height: auto;
        }
        .video-js .vjs-control-bar {
            font-size: 14px;
            background-color: #2c2c2c;
            position: absolute;
            bottom: 0;
            width: 100%;
        }
        .episodes-list {
            flex: 1;
            height: 100%;
            overflow-y: auto;
            background-color: #2c2c2c;
            padding: 10px;
            border-radius: 5px;
            min-width: 350px;
        }
        .episode-item {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
            cursor: pointer;
            padding: 5px;
            border-radius: 3px;
            transition: background-color 0.2s;
        }
        .episode-item:hover {
            background-color: #3a3a3a;
        }
        .episode-item.active {
            background-color: #1e90ff;
            color: #ffffff;
        }
        .episode-item.active span {
            color: #ffffff;
        }
        .episode-item img {
            width: 80px;
            height: 45px;
            object-fit: cover;
            margin-right: 10px;
            border-radius: 3px;
        }
        .episode-item span {
            font-size: 14px;
            color: #e0e0e0;
        }
        .video-js .vjs-big-play-button {
            background-color: rgba(0, 0, 0, 0.7);
            border-color: #ffffff;
        }
        .video-js .vjs-play-progress,
        .video-js .vjs-volume-level {
            background-color: #1e90ff;
        }
        .video-js .vjs-slider {
            background-color: #555555;
        }
        .vjs-quality-menu {
            position: relative;
            display: inline-block;
        }
        .vjs-quality-menu .vjs-menu-button {
            cursor: pointer;
            color: #ffffff;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%;
        }
        .vjs-quality-menu .vjs-thinking-indicator {
            display: none;
        }
        .vjs-quality-menu .vjs-menu {
            display: none;
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            background: #2c2c2c;
            color: #ffffff;
            border-radius: 4px;
            z-index: 100;
            border: 1px solid #444444;
        }
        ul.vjs-menu {
            padding-inline-start: 0;
        }
        .vjs-quality-menu:hover .vjs-menu {
            display: block;
        }
        .vjs-quality-menu .vjs-menu li {
            padding: 8px 16px;
            cursor: pointer;
            list-style: none;
            font-size: 12px;
        }
        .vjs-quality-menu .vjs-menu li:hover {
            background: #3a3a3a;
        }
        .vjs-quality-menu .vjs-selected {
            font-weight: bold;
            background: #1e90ff;
        }
        .error-message {
            color: #ff5555;
            text-align: center;
            padding: 10px;
        }
        /* Стили для модальных окон */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }
        .modal-content {
            background: #2c2c2c;
            padding: 20px;
            border-radius: 5px;
            text-align: center;
            color: #ffffff;
            max-width: 400px;
        }
        .modal-content p {
            margin: 0 0 20px;
        }
        .modal-content button {
            padding: 10px 20px;
            margin: 0 10px;
            border: none;
            border-radius: 3px;
            cursor: pointer;
            background: #1e90ff;
            color: #ffffff;
        }
        .modal-content button.cancel {
            background: #555555;
        }
        /* Скрытие списка серий в вертикальной ориентации */
        @media (orientation: portrait) {
            .episodes-list {
                display: none;
            }
            .video-container {
                flex: 1;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="video-container">
            <!-- Контейнер для плеера -->
            <video-js id="my-video" class="video-js vjs-default-skin" controls preload="auto">
                <p class="vjs-no-js">
                    Для просмотра видео включите JavaScript и используйте браузер, поддерживающий HTML5 видео.
                </p>
            </video-js>
        </div>
        <div class="episodes-list" id="episodes-list">
            <!-- Список серий будет добавлен динамически -->
        </div>
    </div>

    <!-- Модальное окно для продолжения воспроизведения -->
    <div class="modal" id="continue-modal">
        <div class="modal-content">
            <p id="continue-message"></p>
            <button id="continue-btn">Продолжить</button>
            <button id="cancel-btn" class="cancel">Начать сначала</button>
        </div>
    </div>

    <!-- Модальное окно для пропуска заставок -->
    <div class="modal" id="skip-modal">
        <div class="modal-content">
            <p id="skip-message"></p>
            <button id="skip-btn">Пропустить</button>
            <button id="skip-cancel-btn" class="cancel">Отменить</button>
        </div>
    </div>

    <!-- Подключаем Video.js -->
    <script src="https://vjs.zencdn.net/8.10.0/video.min.js"></script>
    <!-- Подключаем плагин плейлиста -->
    <script src="https://unpkg.com/videojs-playlist@4.3.1/dist/videojs-playlist.min.js"></script>
    <script>
        // Инициализация плеера
        const player = videojs('my-video', {
            responsive: true,
            playbackRates: [0.5, 1, 1.5, 2],
            html5: {
                vhs: {
                    overrideNative: true
                }
            }
        });

        // Обработка перемотки с помощью стрелок на клавиатуре
        document.addEventListener('keydown', (event) => {
            if (event.key === 'ArrowRight') {
                event.preventDefault();
                const currentTime = player.currentTime();
                const duration = player.duration();
                if (!isNaN(duration)) {
                    player.currentTime(Math.min(currentTime + 10, duration));
                }
            } else if (event.key === 'ArrowLeft') {
                event.preventDefault();
                const currentTime = player.currentTime();
                player.currentTime(Math.max(currentTime - 10, 0));
            }
        });

        // Функция для подсветки текущей серии
        function highlightEpisode(index) {
            const episodeItems = document.querySelectorAll('.episode-item');
            episodeItems.forEach((item, i) => {
                item.classList.toggle('active', i === index);
            });
        }

        // Функция для создания кастомного меню качества
        function createQualityMenu(player, qualities, currentQuality) {
            const controlBar = player.controlBar.el();
            const qualityMenu = document.createElement('div');
            qualityMenu.className = 'vjs-quality-menu vjs-control';

            const button = document.createElement('div');
            button.className = 'vjs-menu-button vjs-control';
            button.innerHTML = `<span>${currentQuality}</span>`;
            qualityMenu.appendChild(button);

            const menu = document.createElement('ul');
            menu.className = 'vjs-menu';
            qualities.forEach(quality => {
                const li = document.createElement('li');
                li.innerText = quality.label;
                if (quality.label === currentQuality) {
                    li.className = 'vjs-selected';
                }
                li.addEventListener('click', () => {
                    player.src({ src: quality.src, type: 'application/x-mpegURL' });
                    button.innerHTML = `<span>${quality.label}</span>`;
                    menu.querySelectorAll('li').forEach(item => item.className = '');
                    li.className = 'vjs-selected';
                    player.play();
                });
                menu.appendChild(li);
            });
            qualityMenu.appendChild(menu);

            const settingsButton = controlBar.querySelector('.vjs-settings-control') || controlBar.lastChild;
            controlBar.insertBefore(qualityMenu, settingsButton);
        }

        // Функции для работы с localStorage
        function saveProgress(animeId, episodeIndex, currentTime) {
            let progress = JSON.parse(localStorage.getItem('animeProgress') || '{}');
            progress[animeId] = { episodeIndex, currentTime };
            localStorage.setItem('animeProgress', JSON.stringify(progress));
        }

        function getProgress(animeId) {
            const progress = JSON.parse(localStorage.getItem('animeProgress') || '{}');
            return progress[animeId] || null;
        }

        // Функция для показа модального окна продолжения
        function showContinueModal(episodeIndex, currentTime, episodeName) {
            const modal = document.getElementById('continue-modal');
            const message = document.getElementById('continue-message');
            const continueBtn = document.getElementById('continue-btn');
            const cancelBtn = document.getElementById('cancel-btn');

            message.textContent = `Продолжить "${episodeName}" с ${Math.floor(currentTime / 60)}:${Math.floor(currentTime % 60).toString().padStart(2, '0')}?`;
            modal.style.display = 'flex';

            continueBtn.onclick = () => {
                player.playlist.currentItem(episodeIndex);
                player.currentTime(currentTime);
                highlightEpisode(episodeIndex);
                player.play();
                modal.style.display = 'none';
            };

            cancelBtn.onclick = () => {
                player.playlist.currentItem(episodeIndex);
                player.currentTime(0);
                highlightEpisode(episodeIndex);
                player.play();
                modal.style.display = 'none';
            };
        }

        // Функция для показа модального окна пропуска заставок
        function showSkipModal(type, stopTime) {
            const modal = document.getElementById('skip-modal');
            const message = document.getElementById('skip-message');
            const skipBtn = document.getElementById('skip-btn');
            const cancelBtn = document.getElementById('skip-cancel-btn');

            message.textContent = `Пропустить ${type === 'opening' ? 'опенинг' : 'эндинг'} через 3 секунды`;
            modal.style.display = 'flex';

            let timeout = setTimeout(() => {
                player.currentTime(stopTime);
                modal.style.display = 'none';
            }, 3000);

            skipBtn.onclick = () => {
                clearTimeout(timeout);
                player.currentTime(stopTime);
                modal.style.display = 'none';
            };

            cancelBtn.onclick = () => {
                clearTimeout(timeout);
                modal.style.display = 'none';
            };
        }

        // Функция для проверки необходимости пропуска заставок
        function checkSkip(currentTime, opening, ending) {
            const modal = document.getElementById('skip-modal');
            if (modal.style.display === 'flex') return; // Не показываем, если модалка уже открыта

            if (opening && opening.start && opening.stop && currentTime >= opening.start && currentTime < opening.stop) {
                showSkipModal('opening', opening.stop);
            } else if (ending && ending.start && ending.stop && currentTime >= ending.start && currentTime < ending.stop) {
                showSkipModal('ending', ending.stop);
            }
        }

        // Функция для получения параметра из URL
        function getParam(get) {
            const params = new URLSearchParams(window.location.search);
            return params.get(get);
        }

        // Функция для загрузки данных и создания плейлиста
        async function loadPlaylist(animeId) {
            try {
                const response = await fetch(`https://anilibria.top/api/v1/anime/releases/${animeId}`);
                if (!response.ok) {
                    throw new Error(`Ошибка API: ${response.status}`);
                }
                const data = await response.json();

                if (!data?.episodes?.length) {
                    throw new Error('Эпизоды не найдены');
                }

                // Формируем плейлист
                const playlist = data.episodes.map((episode, index) => {
                    return {
                        sources: [
                            { src: episode.hls_1080, type: 'application/x-mpegURL', label: '1080p' },
                            { src: episode.hls_720, type: 'application/x-mpegURL', label: '720p' },
                            { src: episode.hls_480, type: 'application/x-mpegURL', label: '480p' }
                        ].filter(source => source.src),
                        poster: `https://anilibria.top${episode.preview.src}`,
                        name: episode.name,
                        thumbnail: `https://anilibria.top${episode.preview.src}`,
                        opening: episode.opening || null,
                        ending: episode.ending || null
                    };
                });

                // Инициализируем плейлист
                player.playlist(playlist);
                player.playlist.autoadvance(0);

                // Создаём кастомное меню качества для первой серии
                const firstEpisode = playlist[0];
                if (firstEpisode.sources.length > 0) {
                    createQualityMenu(player, firstEpisode.sources, firstEpisode.sources[0].label);
                }

                // Проверяем прогресс для аниме
                const savedProgress = getProgress(animeId);
                if (savedProgress && savedProgress.currentTime > 5) {
                    showContinueModal(savedProgress.episodeIndex, savedProgress.currentTime, playlist[savedProgress.episodeIndex].name);
                    highlightEpisode(savedProgress.episodeIndex);
                } else {
                    player.play();
                    highlightEpisode(0); // Подсвечиваем первую серию по умолчанию
                }

                // Обновляем меню качества, проверяем прогресс и подсвечиваем серию при смене
                player.on('playlistitem', () => {
                    const currentItem = player.playlist.currentItem();
                    const currentEpisode = playlist[currentItem];
                    if (currentEpisode.sources.length > 0) {
                        const qualityMenu = player.controlBar.el().querySelector('.vjs-quality-menu');
                        if (qualityMenu) qualityMenu.remove();
                        createQualityMenu(player, currentEpisode.sources, currentEpisode.sources[0].label);
                    }
                    const savedProgress = getProgress(animeId);
                    if (savedProgress && savedProgress.episodeIndex === currentItem && savedProgress.currentTime > 5) {
                        showContinueModal(savedProgress.episodeIndex, savedProgress.currentTime, currentEpisode.name);
                    }
                    highlightEpisode(currentItem); // Подсвечиваем текущую серию
                });

                // Сохраняем прогресс и проверяем необходимость пропуска заставок
                player.on('timeupdate', () => {
                    const currentItem = player.playlist.currentItem();
                    const currentTime = player.currentTime();
                    if (currentTime > 5) {
                        saveProgress(animeId, currentItem, currentTime);
                    }
                    const currentEpisode = playlist[currentItem];
                    checkSkip(currentTime, currentEpisode.opening, currentEpisode.ending);
                });

                // Создаём список серий с превью и номерами
                const episodesList = document.getElementById('episodes-list');
                episodesList.innerHTML = '';
                playlist.forEach((episode, index) => {
                    const episodeItem = document.createElement('div');
                    episodeItem.className = 'episode-item';
                    episodeItem.innerHTML = `
                        <img src="${episode.thumbnail}" alt="${episode.name}" loading="lazy">
                        <span>${index + 1}. ${episode.name}</span>
                    `;
                    episodeItem.addEventListener('click', () => {
                        player.playlist.currentItem(index);
                        player.play();
                        highlightEpisode(index); // Подсвечиваем при клике
                    });
                    episodesList.appendChild(episodeItem);
                });

                // Подсвечиваем первую серию или сохранённую
                highlightEpisode(savedProgress ? savedProgress.episodeIndex : 0);
            } catch (error) {
                console.error('Ошибка загрузки плейлиста:', error);
                const episodesList = document.getElementById('episodes-list');
                episodesList.innerHTML = '<p class="error-message">Ошибка загрузки данных. Проверьте соединение или API.</p>';
            }
        }

        // Загружаем плейлист с динамическим animeId
        loadPlaylist(getParam("id") || 9217);
    </script>
</body>
</html>