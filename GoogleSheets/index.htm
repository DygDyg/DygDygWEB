<!--
Copyright 2018 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<!-- [START sheets_quickstart] -->
<!DOCTYPE html>
<html>

<head>
  <title>Sheets API Quickstart</title>
  <meta charset="utf-8" />
</head>

<body>
  <!--Add buttons to initiate auth sequence and sign out-->
  <button id="authorize_button" onclick="handleAuthClick()">Authorize</button>
  <button id="signout_button" onclick="handleSignoutClick()">Sign Out</button>

  <pre id="content" style="white-space: pre-wrap;"></pre>

  <script type="text/javascript">
    /* exported gapiLoaded */
    /* exported gisLoaded */
    /* exported handleAuthClick */
    /* exported handleSignoutClick */

    // TODO(developer): Set to client ID and API key from the Developer Console

    const CLIENT_ID = "994916635680-04hjsvjbahai7c4e0nhp8tr2ck35vj3k.apps.googleusercontent.com";

    const API_KEY = 'AIzaSyAbj2A26TQ5ZB3IZoUYAQx7ip559fPX9oc';

    // Discovery doc URL for APIs used by the quickstart
    const DISCOVERY_DOC = 'https://sheets.googleapis.com/$discovery/rest?version=v4';

    // Authorization scopes required by the API; multiple scopes can be
    // included, separated by spaces.
    const SCOPES = 'https://www.googleapis.com/auth/spreadsheets.readonly';

    let tokenClient;
    let gapiInited = false;
    let gisInited = false;

    document.getElementById('authorize_button').style.visibility = 'hidden';
    document.getElementById('signout_button').style.visibility = 'hidden';

    /**
     * Callback after api.js is loaded.
     */
    function gapiLoaded() {
      gapi.load('client', initializeGapiClient);
    }

    /**
     * Callback after the API client is loaded. Loads the
     * discovery doc to initialize the API.
     */
    async function initializeGapiClient() {
      await gapi.client.init({
        apiKey: API_KEY,
        discoveryDocs: [DISCOVERY_DOC],
      });
      gapiInited = true;
      maybeEnableButtons();
    }

    /**
     * Callback after Google Identity Services are loaded.
     */
    function gisLoaded() {
      tokenClient = google.accounts.oauth2.initTokenClient({
        client_id: CLIENT_ID,
        scope: SCOPES,
        callback: '', // defined later
      });
      gisInited = true;
      maybeEnableButtons();
    }

    /**
     * Enables user interaction after all libraries are loaded.
     */
    function maybeEnableButtons() {
      if (gapiInited && gisInited) {
        document.getElementById('authorize_button').style.visibility = 'visible';
      }
    }

    /**
     *  Sign in the user upon button click.
     */
    function handleAuthClick() {
      tokenClient.callback = async (resp) => {
        if (resp.error !== undefined) {
          throw (resp);
        }
        localStorage.setItem('google_token', gapi.client.getToken());
        console.log(gapi.client.getToken())

        document.getElementById('signout_button').style.visibility = 'visible';
        document.getElementById('authorize_button').innerText = 'Refresh';
        
        await listMajors(Math.round(Math.random() * 1));
      };
      console.log(localStorage.getItem('google_token'))
      gapi.client.setToken(localStorage.getItem('google_token'));

      if (gapi.client.getToken() === null) {
        // Prompt the user to select a Google Account and ask for consent to share their data
        // when establishing a new session.
        tokenClient.requestAccessToken({ prompt: 'consent' });
      } else {
        // Skip display of account chooser and consent dialog for an existing session.
        tokenClient.requestAccessToken({ prompt: '' });
      }
    }

    /**
     *  Sign out the user upon button click.
     */
    function handleSignoutClick() {
      const token = gapi.client.getToken();
      if (token !== null) {
        google.accounts.oauth2.revoke(token.access_token);
        gapi.client.setToken('');
        document.getElementById('content').innerText = '';
        document.getElementById('authorize_button').innerText = 'Authorize';
        document.getElementById('signout_button').style.visibility = 'hidden';
      }
    }

    /**
     * Print the names and majors of students in a sample spreadsheet:
     * https://docs.google.com/spreadsheets/d/1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms/edit
     */
    async function listMajors(i) {
      let response;
      sheets = [{t:'182FbA0hwRDEMR6PA3bUpTtpw9Di7so3oTIkwPGlnqxs',l:"list1!A1:J"}, {t:'1lmuMYYLpJENk6dho7-l0jmPsHoVVl2c9jpaQzRW0SiQ',l:"KEYS EU!A1:J"}]
      try {
        // Fetch first 10 files
        response = await gapi.client.sheets.spreadsheets.values.get({
          spreadsheetId: sheets[i]["t"],
          range: sheets[i]["l"],
        });
      } catch (err) {
        document.getElementById('content').innerText = err.message;
        return;
      }
      var range = response.result;
      if (!range || !range.values || range.values.length == 0) {
        document.getElementById('content').innerText = 'No values found.';
        return;
      }
      // Flatten to string to display

      var output = `<table><tr>`;
      console.log(range.values[100][0])
      range.values.forEach(e => {
        if(e[1]=="") return
        output = `${output}<tr>`
        e.forEach(e2 => {
          output = `${output}<td>${e2}</td>`
        });
        output = `${output}</tr>`
      });
      output = `${output}</tr></table>`
      document.getElementById('content').innerHTML = output;
    }
  </script>
  <script async defer src="https://apis.google.com/js/api.js" onload="gapiLoaded()"></script>
  <script async defer src="https://accounts.google.com/gsi/client" onload="gisLoaded()"></script>
</body>
<style>
  td {
    border: 1px solid #4d4d4d;
  }
  body {
    background-color: #202124;
    color: #d5d5d5;
}
</style>

</html>
<!-- [END sheets_quickstart] -->