<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Anime Search</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #1a1a1a;
            color: #e0e0e0;
        }
        .search-container {
            margin-bottom: 20px;
            display: none;
        }
        input[type="text"] {
            padding: 10px;
            width: 300px;
            font-size: 16px;
            background-color: #2c2c2c;
            color: #e0e0e0;
            border: 1px solid #444;
            border-radius: 4px;
        }
        input[type="text"]::placeholder {
            color: #888;
        }
        button {
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
        }
        button:hover {
            background-color: #45a049;
        }
        .anime-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
        }
        .anime-card {
            background: #2c2c2c;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.3);
            overflow: hidden;
            transition: transform 0.2s;
            cursor: pointer;
        }
        .anime-card:hover {
            transform: translateY(-5px);
        }
        .anime-card img {
            width: 100%;
            height: 300px;
            object-fit: cover;
        }
        .anime-card-content {
            padding: 15px;
        }
        .anime-card h3 {
            margin: 0 0 10px;
            font-size: 18px;
            color: #ffffff;
        }
        .anime-card p {
            margin: 0;
            font-size: 14px;
            color: #b0b0b0;
            line-height: 1.4;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }
        .video-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            z-index: 1000;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }
        .video-overlay iframe {
            width: 100%;
            height: 100%;
            border: none;
        }
        .close-button {
            position: absolute;
            top: 20px;
            left: 20px;
            padding: 10px 100px;
            font-size: 16px;
            cursor: pointer;
            background-color: #ff4444;
            color: white;
            border: none;
            border-radius: 4px;
            transition: opacity 0.3s;
        }
        .close-button:hover {
            background-color: #cc0000;
        }
    </style>
</head>
<body>
    <div class="search-container">
        <input type="text" id="searchInput" placeholder="Введите название аниме..." value="">
        <button onclick="searchAnime()">Поиск</button>
    </div>
    <div class="anime-grid" id="animeGrid"></div>
    <div class="video-overlay" id="videoOverlay" style="display: none;">
        <button class="close-button" id="closeButton" onclick="closeVideo()">Закрыть</button>
        <iframe id="videoIframe" allowfullscreen="allowfullscreen"></iframe>
    </div>

    <script>
        function getQueryParam() {
            const params = new URLSearchParams(window.location.search);
            return params.get('query') || 'Песнь ночных сов';
        }

        async function searchAnime() {
            const query = encodeURIComponent(document.getElementById('searchInput').value);
            const url = `https://anilibria.wtf/api/v1/app/search/releases?query=${query}`;
            const grid = document.getElementById('animeGrid');
            grid.innerHTML = '';

            try {
                const response = await fetch(url);
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                const data = await response.json();
                console.log('API Response:', data);

                let animeList = [];
                if (Array.isArray(data)) {
                    animeList = data;
                } else if (data.data && Array.isArray(data.data)) {
                    animeList = data.data;
                } else if (data.items && Array.isArray(data.items)) {
                    animeList = data.items;
                } else {
                    throw new Error('Unexpected response format');
                }

                if (animeList.length > 0) {
                    animeList.forEach(anime => {
                        console.log('Anime item:', anime);
                        const card = document.createElement('div');
                        card.className = 'anime-card';
                        card.setAttribute('data-id', anime.id || '');
                        card.innerHTML = `
                            <img src="${"https://anilibria.wtf" + (anime.poster?.src || '') || 'https://via.placeholder.com/250x300'}" alt="${anime.name?.main || 'Без названия'}">
                            <div class="anime-card-content">
                                <h3>${anime.name?.main || 'Без названия'}</h3>
                                <p>${anime.description || 'Описание отсутствует'}</p>
                            </div>
                        `;
                        card.addEventListener('click', () => showEpisodeVideo(anime.id));
                        grid.appendChild(card);
                    });
                } else {
                    grid.innerHTML = '<p>Ничего не найдено</p>';
                }
            } catch (error) {
                console.error('Error:', error);
                grid.innerHTML = `<p>Произошла ошибка: ${error.message}</p>`;
            }
        }

        async function showEpisodeVideo(animeId) {
            if (!animeId) {
                alert('ID аниме не найден');
                return;
            }

            try {
                document.location.href = `test_11.htm?id=${animeId}`
                return;

                const response = await fetch(`https://anilibria.wtf/api/v1/anime/releases/${animeId}`);
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                const data = await response.json();
                console.log('Release Response:', data);

                const episodes = data.episodes || [];
                if (!episodes.length) throw new Error('Эпизоды не найдены');

                const firstEpisode = episodes[0];
                const episodeId = firstEpisode.id;
                if (!episodeId) throw new Error('ID эпизода не найден');

                const videoUrl = `https://anilibria.wtf/anime/video/episode/${episodeId}`;
                const videoOverlay = document.getElementById('videoOverlay');
                const videoIframe = document.getElementById('videoIframe');
                videoIframe.src = videoUrl;
                videoOverlay.style.display = 'flex';
                document.body.style.overflow = 'hidden'; // Скрыть полосу прокрутки
                startButtonHideTimer(); // Запустить таймер скрытия кнопки
            } catch (error) {
                console.error('Error:', error);
                alert(`Ошибка при загрузке видео: ${error.message}`);
            }
        }

        function closeVideo() {
            const videoOverlay = document.getElementById('videoOverlay');
            const videoIframe = document.getElementById('videoIframe');
            videoIframe.src = '';
            videoOverlay.style.display = 'none';
            document.body.style.overflow = 'auto'; // Восстановить полосу прокрутки
            clearTimeout(buttonHideTimeout); // Остановить таймер
        }

        let buttonHideTimeout;
        function startButtonHideTimer() {
            clearTimeout(buttonHideTimeout);
            const closeButton = document.getElementById('closeButton');
            closeButton.style.opacity = '1';
            buttonHideTimeout = setTimeout(() => {
                closeButton.style.opacity = '0';
            }, 5000);
        }

        // Обработчик движения мыши для показа кнопки
        document.addEventListener('mousemove', () => {
            if (document.getElementById('videoOverlay').style.display === 'flex') {
                startButtonHideTimer();
            }
        });

        window.onload = function() {
            const searchInput = document.getElementById('searchInput');
            searchInput.value = getQueryParam();
            searchAnime();
        };
    </script>
</body>
</html>