<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>anilibria player</title>
    <link href="https://vjs.zencdn.net/8.10.0/video-js.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/@theonlyducks/videojs-ambilight/dist/videojs-ambilight.css"
        rel="stylesheet" />
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #1a1a1a;
            color: #ffffff;
            overflow: hidden;
        }

        .container {
            display: flex;
            width: 100vw;
            height: 100vh;
            gap: 10px;
        }

        .video-container {
            flex: 5;
            background-color: #1a1a1a;
            border-radius: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
            max-height: 100vh;
            position: relative;
        }

        #my-video {
            height: 100%;
            z-index: 2;
            display: flex;
            justify-content: center;
        }

        .video-js {
            width: 100%;
            max-height: 100vh;
            height: auto;
        }

        .video-js .vjs-control-bar {
            font-size: 14px;
            background-color: #2c2c2cbd;
            position: absolute;
            bottom: 4px;
            width: 100%;
        }

        .episodes-list {
            flex: 1;
            height: 100%;
            overflow-y: auto;
            background-color: #2c2c2c;
            padding: 10px;
            border-radius: 5px;
            min-width: 350px;
        }

        .episode-item {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
            cursor: pointer;
            padding: 5px;
            border-radius: 3px;
            transition: background-color 0.2s;
        }

        .episode-item:hover {
            background-color: #3a3a3a;
        }

        .episode-item.active {
            background-color: #1e90ff;
            color: #ffffff;
        }

        .episode-item.active span {
            color: #ffffff;
        }

        .episode-item img {
            width: 80px;
            height: 45px;
            object-fit: cover;
            margin-right: 10px;
            border-radius: 3px;
        }

        .episode-item span {
            font-size: 14px;
            color: #e0e0e0;
        }

        .video-js .vjs-big-play-button {
            background-color: rgba(0, 0, 0, 0.7);
            border-color: #ffffff;
        }

        .video-js .vjs-play-progress,
        .video-js .vjs-volume-level {
            background-color: #1e90ff;
        }

        .video-js .vjs-slider {
            background-color: #555555;
        }

        .vjs-quality-menu {
            position: relative;
            display: inline-block;
        }

        .vjs-quality-menu .vjs-menu-button {
            cursor: pointer;
            color: #ffffff;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%;
        }

        .vjs-quality-menu .vjs-thinking-indicator {
            display: none;
        }

        .vjs-quality-menu .vjs-menu {
            display: none;
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            background: #2c2c2c;
            color: #ffffff;
            border-radius: 4px;
            z-index: 100;
            border: 1px solid #444444;
        }

        ul.vjs-menu {
            padding-inline-start: 0;
        }

        .vjs-quality-menu:hover .vjs-menu {
            display: block;
        }

        .vjs-quality-menu .vjs-menu li {
            padding: 8px 16px;
            cursor: pointer;
            list-style: none;
            font-size: 12px;
        }

        .vjs-quality-menu .vjs-menu li:hover {
            background: #3a3a3a;
        }

        .vjs-quality-menu .vjs-selected {
            font-weight: bold;
            background: #1e90ff;
        }

        .error-message {
            color: #ff5555;
            text-align: center;
            padding: 10px;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: #2c2c2c;
            padding: 20px;
            border-radius: 5px;
            text-align: center;
            color: #ffffff;
            max-width: 400px;
        }

        .modal-content p {
            margin: 0 0 20px;
        }

        .modal-content button {
            padding: 10px 20px;
            margin: 0 10px;
            border: none;
            border-radius: 3px;
            cursor: pointer;
            background: #1e90ff;
            color: #ffffff;
        }

        .modal-content button.cancel {
            background: #555555;
        }

        #ambilight {
            width: 100%;
            height: 100%;
        }

        video#my-video_html5_api {
            mask-image: linear-gradient(to right,
                    transparent 0%,
                    black 1%,
                    black 99%,
                    transparent 100%);
            left: auto;
            width: auto;
        }

        .vjs-next-episode,
        .vjs-prev-episode {
            cursor: pointer;
            color: #ffffff;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 30px;
            height: 100%;
            /* background: #2c2c2c; */
            transition: background-color 0.2s;
        }

        .vjs-next-episode:hover,
        .vjs-prev-episode:hover {
            background: #3a3a3a;
        }

        .vjs-next-episode.disabled,
        .vjs-prev-episode.disabled {
            cursor: not-allowed;
            opacity: 0.5;
        }

        .vjs-progress-holder {
            position: relative;
        }

        .vjs-opening-segment,
        .vjs-ending-segment {
            position: absolute;
            height: 100%;
            top: 0;
            z-index: 1;
            opacity: 0.5;
        }

        .vjs-opening-segment {
            background-color: #00ff00;
        }

        .vjs-ending-segment {
            background-color: #ff00ff;
        }

        .hotkeys-help {
            position: absolute;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(44, 44, 44, 0.9);
            color: #ffffff;
            padding: 10px 20px;
            border-radius: 5px;
            z-index: 3;
            font-size: 14px;
            display: none;
            text-align: start;
        }

        .hotkeys-help ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .hotkeys-help li {
            margin: 1px 0;
            padding: 5px 0px;
        }

        .hotkeys-help kbd {
            background: #1b1b1b;
            /* padding: 0px 6px; */
            border-radius: 5px;
            font-family: monospace;
            border-style: solid;
            font-weight: bold;
            border-width: thin;
            padding: 3px 7px;
        }

        @media (orientation: portrait) {
            .episodes-list {
                display: none;
            }

            .video-container {
                flex: 1;
            }
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="video-container">
            <div class="hotkeys-help" id="hotkeys-help">
                <ul>
                    <li><kbd>Пробел</kbd>: Воспроизведение/пауза</li>
                    <li><kbd>F</kbd>: Полноэкранный режим</li>
                    <li><kbd>M</kbd>: Вкл/выкл звук</li>
                    <li><kbd>←</kbd>/<kbd>→</kbd>: Перемотка на ±10 секунд</li>
                    <li><kbd>|◀◀</kbd>/<kbd>▶▶|</kbd>: Перемотка на ±10 секунд</li>
                    <li><kbd>↑</kbd>/<kbd>↓</kbd>: Громкость ±10%</li>
                    <li><kbd>Shift</kbd> + <kbd>←</kbd>/<kbd>→</kbd>: Предыдущая/следующая серия</li>
                </ul>
            </div>
            <video-js id="my-video" class="video-js vjs-default-skin" controls preload="auto">
                <p class="vjs-no-js">
                    Для просмотра видео включите JavaScript и используйте браузер, поддерживающий HTML5 видео.
                </p>
            </video-js>
        </div>
        <div class="episodes-list" id="episodes-list"></div>
    </div>
    <div class="modal" id="continue-modal">
        <div class="modal-content">
            <p id="continue-message"></p>
            <button id="continue-btn">Продолжить</button>
            <button id="cancel-btn" class="cancel">Начать сначала</button>
        </div>
    </div>
    <script src="https://vjs.zencdn.net/8.10.0/video.min.js"></script>
    <script src="https://unpkg.com/videojs-playlist@4.3.1/dist/videojs-playlist.min.js"></script>
    <script
        src="https://cdn.jsdelivr.net/npm/@theonlyducks/videojs-ambilight@latest/dist/videojs-ambilight.js"></script>
    <script>
        const player = videojs('my-video', {
            responsive: true,
            playbackRates: [0.5, 1, 1.5, 2],
            html5: { vhs: { overrideNative: true } }
        });

        const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

        function initializeAmbiLight() {
            if (isMobile) return;
            const videoElement = document.querySelector('video-js');
            if (videoElement && videoElement.offsetWidth / videoElement.offsetHeight > 1.8) {
                player.ambiLightPlugin({
                    fps: 15,
                    blur: 80,
                    scale: 1,
                    opacity: 1.0,
                    saturate: 100
                });
            }
        }

        player.on('loadedmetadata', initializeAmbiLight);

        let selectedQuality = '1080p';
        const hotkeysHelp = document.getElementById('hotkeys-help');

        function updateHotkeysHelp() {
            hotkeysHelp.style.display = player.paused() || !player.hasStarted_ ? 'block' : 'none';
        }

        player.on('play', updateHotkeysHelp);
        player.on('pause', updateHotkeysHelp);
        player.on('loadedmetadata', updateHotkeysHelp);

        // Настройка Media Session API
        if ('mediaSession' in navigator) {
            //window.pl = player
            //console.log("mediaSession", player)
            navigator.mediaSession.metadata = new MediaMetadata({
                title: document.title,
                artist: 'Аниме',
                album: 'Что то на Японском'
            });

            navigator.mediaSession.setActionHandler('play', () => {
                player.play();
                console.log('Воспроизведение');
            });

            navigator.mediaSession.setActionHandler('pause', () => {
                player.pause();
                console.log('Пауза');
            });
            navigator.mediaSession.setActionHandler('stop', () => {
                player.stop();
                console.log('Пауза');
            });

            navigator.mediaSession.setActionHandler('previoustrack', () => {
                console.log('Перемотка назад');
                player.currentTime(Math.min(player.currentTime() - 10, player.duration()));

            });

            navigator.mediaSession.setActionHandler('nexttrack', () => {
                console.log('Перемотка вперед');
                player.currentTime(Math.min(player.currentTime() + 10, player.duration()));

            });
        } else {
            console.log('Media Session API не поддерживается');
        }

        document.addEventListener('keydown', (event) => {
            if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') return;

            if (event.code === 'Space') {
                event.preventDefault();
                player.paused() ? player.play() : player.pause();
            } else if (event.code === 'KeyF') {
                event.preventDefault();
                player.isFullscreen() ? player.exitFullscreen() : player.requestFullscreen();
            } else if (event.code === 'KeyM') {
                event.preventDefault();
                player.muted(!player.muted());
            } else if (event.code === 'ArrowRight') {
                event.preventDefault();
                if (event.shiftKey) {
                    const currentIndex = player.playlist.currentItem();
                    if (currentIndex < player.playlist().length - 1) {
                        player.playlist.next();
                        highlightEpisode(player.playlist.currentItem());
                        player.play();
                    }
                } else {
                    const currentTime = player.currentTime();
                    const duration = player.duration();
                    if (!isNaN(duration)) {
                        player.currentTime(Math.min(currentTime + 10, duration));
                    }
                }
            } else if (event.code === 'ArrowLeft') {
                event.preventDefault();
                if (event.shiftKey) {
                    const currentIndex = player.playlist.currentItem();
                    if (currentIndex > 0) {
                        player.playlist.previous();
                        highlightEpisode(player.playlist.currentItem());
                        player.play();
                    }
                } else {
                    const currentTime = player.currentTime();
                    player.currentTime(Math.max(currentTime - 10, 0));
                }
            } else if (event.code === 'ArrowUp') {
                event.preventDefault();
                const currentVolume = player.volume();
                player.volume(Math.min(currentVolume + 0.1, 1));
            } else if (event.code === 'ArrowDown') {
                event.preventDefault();
                const currentVolume = player.volume();
                player.volume(Math.max(currentVolume - 0.1, 0));
            }
        });

        function highlightEpisode(index) {
            const episodeItems = document.querySelectorAll('.episode-item');
            episodeItems.forEach((item, i) => {
                item.classList.toggle('active', i === index);
            });
        }

        function createEpisodeNavigationButtons() {
            const controlBar = player.controlBar.el();
            const prevButton = document.createElement('div');
            prevButton.className = 'vjs-prev-episode vjs-control';
            prevButton.innerHTML = '<span><</span>';
            prevButton.title = 'Предыдущая серия';
            controlBar.insertBefore(prevButton, controlBar.querySelector('.vjs-progress-control') || controlBar.lastChild);

            const nextButton = document.createElement('div');
            nextButton.className = 'vjs-next-episode vjs-control';
            nextButton.innerHTML = '<span>></span>';
            nextButton.title = 'Следующая серия';
            controlBar.insertBefore(nextButton, controlBar.querySelector('.vjs-progress-control') || controlBar.lastChild);

            function updateButtonStates() {
                const currentIndex = player.playlist.currentItem();
                const playlistLength = player.playlist().length;
                prevButton.classList.toggle('disabled', currentIndex === 0);
                nextButton.classList.toggle('disabled', currentIndex === playlistLength - 1);
            }

            prevButton.addEventListener('click', () => {
                if (!prevButton.classList.contains('disabled')) {
                    player.playlist.previous();
                    highlightEpisode(player.playlist.currentItem());
                    player.play();
                }
            });

            nextButton.addEventListener('click', () => {
                if (!nextButton.classList.contains('disabled')) {
                    player.playlist.next();
                    highlightEpisode(player.playlist.currentItem());
                    player.play();
                }
            });

            player.on('playlistitem', updateButtonStates);
            updateButtonStates();
        }

        function createQualityMenu(player, qualities, currentQuality) {
            const controlBar = player.controlBar.el();
            const qualityMenu = document.createElement('div');
            qualityMenu.className = 'vjs-quality-menu vjs-control';

            const button = document.createElement('div');
            button.className = 'vjs-menu-button vjs-control';
            button.innerHTML = `<span>${currentQuality}</span>`;
            qualityMenu.appendChild(button);

            const menu = document.createElement('ul');
            menu.className = 'vjs-menu';
            qualities.forEach(quality => {
                const li = document.createElement('li');
                li.innerText = quality.label;
                if (quality.label === currentQuality) {
                    li.className = 'vjs-selected';
                }
                li.addEventListener('click', () => {
                    const currentTime = player.currentTime();
                    selectedQuality = quality.label;
                    player.src({ src: quality.src, type: 'application/x-mpegURL' });
                    button.innerHTML = `<span>${quality.label}</span>`;
                    menu.querySelectorAll('li').forEach(item => item.className = '');
                    li.className = 'vjs-selected';
                    player.one('loadedmetadata', () => {
                        player.currentTime(currentTime);
                        player.play();
                    });
                });
                menu.appendChild(li);
            });
            qualityMenu.appendChild(menu);

            const settingsButton = controlBar.querySelector('.vjs-settings-control') || controlBar.lastChild;
            controlBar.insertBefore(qualityMenu, settingsButton);
        }

        function addSegmentMarkers(opening, ending) {
            const progressHolder = document.querySelector('.vjs-progress-holder');
            if (!progressHolder) return;

            const existingSegments = progressHolder.querySelectorAll('.vjs-opening-segment, .vjs-ending-segment');
            existingSegments.forEach(segment => segment.remove());

            const duration = player.duration();
            if (!duration || isNaN(duration)) return;

            if (opening && opening.start && opening.stop && opening.start < opening.stop && opening.stop <= duration) {
                const openingSegment = document.createElement('div');
                openingSegment.className = 'vjs-opening-segment';
                const startPercent = (opening.start / duration) * 100;
                const widthPercent = ((opening.stop - opening.start) / duration) * 100;
                openingSegment.style.left = `${startPercent}%`;
                openingSegment.style.width = `${widthPercent}%`;
                progressHolder.appendChild(openingSegment);
            }

            if (ending && ending.start && ending.stop && ending.start < ending.stop && ending.stop <= duration) {
                const endingSegment = document.createElement('div');
                endingSegment.className = 'vjs-ending-segment';
                const startPercent = (ending.start / duration) * 100;
                const widthPercent = ((ending.stop - ending.start) / duration) * 100;
                endingSegment.style.left = `${startPercent}%`;
                endingSegment.style.width = `${widthPercent}%`;
                progressHolder.appendChild(endingSegment);
            }
        }

        function saveProgress(animeId, episodeIndex, currentTime) {
            let progress = JSON.parse(localStorage.getItem('animeProgress') || '{}');
            progress[animeId] = { episodeIndex, currentTime };
            localStorage.setItem('animeProgress', JSON.stringify(progress));
        }

        function getProgress(animeId) {
            const progress = JSON.parse(localStorage.getItem('animeProgress') || '{}');
            return progress[animeId] || null;
        }

        function showContinueModal(episodeIndex, currentTime, episodeName) {
            const modal = document.getElementById('continue-modal');
            const message = document.getElementById('continue-message');
            const continueBtn = document.getElementById('continue-btn');
            const cancelBtn = document.getElementById('cancel-btn');

            message.textContent = `Продолжить "${episodeName}" с ${Math.floor(currentTime / 60)}:${Math.floor(currentTime % 60).toString().padStart(2, '0')}?`;
            modal.style.display = 'flex';

            continueBtn.onclick = () => {
                player.playlist.currentItem(episodeIndex);
                player.currentTime(currentTime);
                highlightEpisode(episodeIndex);
                player.play();
                modal.style.display = 'none';
            };

            cancelBtn.onclick = () => {
                player.playlist.currentItem(episodeIndex);
                player.currentTime(0);
                highlightEpisode(episodeIndex);
                player.play();
                modal.style.display = 'none';
            };
        }

        function checkSkip(currentTime, opening, ending) {
            if (opening && opening.start && opening.stop && currentTime >= opening.start && currentTime < opening.stop) {
                player.currentTime(opening.stop);
            } else if (ending && ending.start && ending.stop && currentTime >= ending.start && currentTime < ending.stop) {
                player.currentTime(ending.stop);
            }
        }

        function getParam(get) {
            const params = new URLSearchParams(window.location.search);
            return params.get(get);
        }

        async function loadPlaylist(animeId) {
            try {
                const response = await fetch(`https://anilibria.wtf/api/v1/anime/releases/${animeId}`);
                if (!response.ok) {
                    throw new Error(`Ошибка API: ${response.status}`);
                }
                const data = await response.json();

                if (!data?.episodes?.length) {
                    throw new Error('Эпизоды не найдены');
                }

                const playlist = data.episodes.map((episode, index) => {
                    return {
                        sources: [
                            { src: episode.hls_1080, type: 'application/x-mpegURL', label: '1080p' },
                            { src: episode.hls_720, type: 'application/x-mpegURL', label: '720p' },
                            { src: episode.hls_480, type: 'application/x-mpegURL', label: '480p' }
                        ].filter(source => source.src),
                        poster: episode.preview.src ? `https://anilibria.wtf${episode.preview.src}` : "fav.png",
                        name: episode.name || "",
                        thumbnail: episode.preview.src ? `https://anilibria.wtf${episode.preview.src}` : "cover.jpg",
                        opening: episode.opening || null,
                        ending: episode.ending || null
                    };
                });

                player.playlist(playlist);
                player.playlist.currentItem(0);
                player.playlist.autoadvance(0);

                const firstEpisode = playlist[0];
                if (firstEpisode.sources.length > 0) {
                    const initialQuality = firstEpisode.sources.find(source => source.label === selectedQuality) || firstEpisode.sources[0];
                    selectedQuality = initialQuality.label;
                    player.src({ src: initialQuality.src, type: 'application/x-mpegURL' });
                    player.trigger('playlistitem');
                    createQualityMenu(player, firstEpisode.sources, initialQuality.label);
                    createEpisodeNavigationButtons();
                }

                const savedProgress = getProgress(animeId);
                if (savedProgress && savedProgress.currentTime > 5) {
                    showContinueModal(savedProgress.episodeIndex, savedProgress.currentTime, playlist[savedProgress.episodeIndex].name);
                    highlightEpisode(savedProgress.episodeIndex);
                } else {
                    player.play();
                    highlightEpisode(0);
                }

                player.on('playlistitem', () => {
                    const currentItem = player.playlist.currentItem();
                    const currentEpisode = playlist[currentItem];
                    if (currentEpisode.sources.length > 0) {
                        const qualityMenu = player.controlBar.el().querySelector('.vjs-quality-menu');
                        if (qualityMenu) qualityMenu.remove();
                        const newQuality = currentEpisode.sources.find(source => source.label === selectedQuality) || currentEpisode.sources[0];
                        selectedQuality = newQuality.label;
                        player.src({ src: newQuality.src, type: 'application/x-mpegURL' });
                        createQualityMenu(player, currentEpisode.sources, newQuality.label);
                    }
                    const savedProgress = getProgress(animeId);
                    if (savedProgress && savedProgress.episodeIndex === currentItem && savedProgress.currentTime > 5) {
                        showContinueModal(savedProgress.episodeIndex, savedProgress.currentTime, currentEpisode.name);
                    }
                    highlightEpisode(currentItem);
                    player.one('loadedmetadata', () => {
                        addSegmentMarkers(currentEpisode.opening, currentEpisode.ending);
                        initializeAmbiLight();
                    });
                });

                player.on('timeupdate', () => {
                    const currentItem = player.playlist.currentItem() > -1 ? player.playlist.currentItem() : 0;

                    const currentTime = player.currentTime();
                    if (currentItem < 0 || !playlist[currentItem]) return;
                    if (currentTime > 5) {
                        saveProgress(animeId, currentItem, currentTime);
                    }
                    const currentEpisode = playlist[currentItem];
                    checkSkip(currentTime, currentEpisode.opening, currentEpisode.ending);
                });

                const episodesList = document.getElementById('episodes-list');
                episodesList.innerHTML = '';
                playlist.forEach((episode, index) => {
                    const episodeItem = document.createElement('div');
                    episodeItem.className = 'episode-item';
                    episodeItem.innerHTML = `
                        <img src="${episode.thumbnail}" alt="${episode.name || 'Без названия'}" loading="lazy">
                        <span>${index + 1}. ${episode.name || 'Без названия'}</span>
                    `;
                    episodeItem.addEventListener('click', () => {
                        player.playlist.currentItem(index);
                        player.play();
                        highlightEpisode(index);
                    });
                    episodesList.appendChild(episodeItem);
                });

                highlightEpisode(savedProgress ? savedProgress.episodeIndex : 0);

                player.one('loadedmetadata', () => {
                    addSegmentMarkers(firstEpisode.opening, firstEpisode.ending);
                });
            } catch (error) {
                console.error('Ошибка загрузки плейлиста:', error);
                const episodesList = document.getElementById('episodes-list');
                episodesList.innerHTML = '<p class="error-message">Ошибка загрузки данных. Проверьте соединение или API.</p>';
            }
        }

        loadPlaylist(getParam("id") || 9217);
    </script>
</body>

</html>