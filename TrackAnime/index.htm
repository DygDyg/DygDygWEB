<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
        integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js"
        integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy"
        crossorigin="anonymous"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <title>Track Anime</title>
</head>

<body>
    <dialog id="myDialog">
        <iframe id="VideoPlayer"></iframe>
        <button type="button" class="btn btn-secondary" id="closeDialogButton">X</button>
    </dialog>
</body>
<style>
    #closeDialogButton {
        position: absolute;
        right: 6px;
        top: 6px;
        width: 45px;
        height: 45px;

    }

    dialog#myDialog {
        padding: 0;
        width: 80%;
        height: 80%;
    }

    dialog::backdrop {
        background-color: rgba(0, 0, 0, 0.5);
    }

    iframe#VideoPlayer {
        position: absolute;
        width: 100%;
        height: 100%;
        border: none;
        margin: 0;
        padding: 0;
        overflow: hidden;
        aspect-ratio: 16 / 9;
    }

    body {
        background-color: rgb(66, 66, 66);
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

    .card-title {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .card-img-top {
        width: 100%;
        height: 495px;
        object-fit: cover;
    }

    .card {
        border: solid;
        border-color: rgba(255, 0, 0, 0);
    }

    .card:hover {
        border-color: rgb(201, 201, 201);
        background-color: rgb(75, 75, 75) !important;
    }

    .AniLibria\.TV {
        color: #faa2a2;
    }

    .DreamCast {
        color: rgb(136, 255, 255)
    }

    .AniStar {
        color: rgb(251, 73, 251);
    }

    .AnimeVost {
        color: rgb(101, 214, 101);
    }
</style>
<script>
    const myDialog = document.getElementById('myDialog');
    const VideoPlayer = document.getElementById('VideoPlayer');
    closeDialogButton.addEventListener('click', () => {
        myDialog.close();
    });

    var base_anime = localStorage.getItem('BaseAnime')
    if (base_anime) {
        base_anime = JSON.parse(base_anime)
    } else {
        base_anime = { "base": {} }
        // console.log(JSON.stringify({}))
    }
    if (!base_anime.base) {
        localStorage.setItem('BaseAnime', JSON.stringify({ "base": {} }));
        location.reload();
    }
    // console.log(base_anime)
    function httpGet(theUrl) {
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open("GET", theUrl, false); // false for synchronous request
        xmlHttp.send(null);
        return xmlHttp;
    }
    function createCard(title, description, screenshots, releaseDate, translator, seriesNumber, url_video) {
        const card = document.createElement('div');
        card.classList.add('card', 'bg-dark', 'text-white');
        card.style.width = '22rem';
        card.addEventListener("click", (event) => {
            console.log(url_video)
            dialog(url_video)
        })

        const imgTop = document.createElement('img');
        imgTop.src = screenshots[0];
        imgTop.classList.add('card-img-top');
        imgTop.alt = 'Скриншот 1';
        card.appendChild(imgTop);

        const cardBody = document.createElement('div');
        cardBody.classList.add('card-body');

        const cardTitle = document.createElement('h5');
        cardTitle.classList.add('card-title');
        cardTitle.textContent = title;
        cardTitle.title = title;
        cardBody.appendChild(cardTitle);

        const cardText = document.createElement('p');
        cardText.classList.add('card-text');
        cardText.innerHTML = description;
        cardBody.appendChild(cardText);

        const cardReleaseDate = document.createElement('p');
        cardReleaseDate.classList.add('card-text');
        cardReleaseDate.textContent = `Дата выхода: ${releaseDate}`;
        cardBody.appendChild(cardReleaseDate);

        const cardTranslator = document.createElement('p');
        cardTranslator.classList.add('card-text');
        cardTranslator.classList.add(translator.replaceAll(/\s/g, ''));
        cardTranslator.textContent = `Перевод: ${translator}`;
        cardBody.appendChild(cardTranslator);

        const cardSeriesNumber = document.createElement('p');
        cardSeriesNumber.classList.add('card-text');
        cardSeriesNumber.textContent = `Номер серии: ${seriesNumber}`;
        cardBody.appendChild(cardSeriesNumber);

        const row1 = document.createElement('div');
        row1.classList.add('row');
        const col1 = document.createElement('div');
        col1.classList.add('col');

        if (screenshots[1]) {
            const img1 = document.createElement('img');
            img1.src = screenshots[1];
            img1.classList.add('img-fluid');
            img1.alt = 'Скриншот 2';
            col1.appendChild(img1);
        }
        const col2 = document.createElement('div');
        col2.classList.add('col');
        if (screenshots[2]) {
            const img2 = document.createElement('img');
            img2.src = screenshots[2];
            img2.classList.add('img-fluid');
            img2.alt = 'Скриншот 3';
            col2.appendChild(img2);
        }
        row1.appendChild(col1);
        row1.appendChild(col2);
        cardBody.appendChild(row1);
        const row2 = document.createElement('div');
        row2.classList.add('row');
        const col3 = document.createElement('div');
        col3.classList.add('col');

        if (screenshots[3]) {
            const img3 = document.createElement('img');
            img3.src = screenshots[3];
            img3.classList.add('img-fluid');
            img3.alt = 'Скриншот 4';
            col3.appendChild(img3);
        }
        const col4 = document.createElement('div');
        col4.classList.add('col');

        if (screenshots[4]) {
            const img4 = document.createElement('img');
            img4.src = screenshots[4];
            img4.classList.add('img-fluid');
            img4.alt = 'Скриншот 5';
            col4.appendChild(img4);
        }
        row2.appendChild(col3);
        row2.appendChild(col4);
        cardBody.appendChild(row2);

        card.appendChild(cardBody);
        return card;
    }
    function formatDate(isoDateString) {
        const date = new Date(isoDateString);

        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        const seconds = String(date.getSeconds()).padStart(2, '0');

        return `${day}.${month}.${year} ${hours}:${minutes}:${seconds}`;
    }
    function dialog(url) {
        myDialog.showModal();
        VideoPlayer.contentWindow.location.href = url
    }

    function VoiceTranslate(name) {

        const voice = [
            "AniStar",
            "Dream Cast",
            "AnimeVost",
            "AniDub Online",
            "AniDUB",
            "JAM",
            "AniLibria.TV",
            "SHIZA Project",
        ]
        return voice.includes(name)


    }
    const data = JSON.parse(httpGet("https://kodikapi.com/list?limit=100&token=45c53578f11ecfb74e31267b634cc6a8").response).results
    // const data = JSON.parse(httpGet("test.json").response).results
    console.log(data)

    console.log(base_anime.base)
    var aaa = []
    data.forEach(e => {

        if ((e.type == 'anime-serial') && e.translation.type == "voice" && VoiceTranslate(e.translation.title)) {
            if (!base_anime.base[e.shikimori_id] || base_anime.base[e.shikimori_id].screenshots[0] == undefined) {
                base_anime.base[e.shikimori_id] = JSON.parse(httpGet(`https://shikimori.one/api/animes/${e.shikimori_id}`).response)
                JSON.stringify(base_anime)
                localStorage.setItem('BaseAnime', JSON.stringify(base_anime));
                // console.log(base_anime.base[e.shikimori_id])
            }


            const dat = new Date(e.updated_at)

            const card = createCard(
                base_anime.base[e.shikimori_id].russian,
                "",
                [
                    // e.screenshots[0],
                    `https://shikimori.one/${base_anime.base[e.shikimori_id].image.original}`,
                    `https://shikimori.one/${base_anime.base[e.shikimori_id].screenshots[0]?.preview || "assets/layouts/l-top_menu-v2/glyph.svg"}`,
                    `https://shikimori.one/${base_anime.base[e.shikimori_id].screenshots[1]?.preview || "assets/layouts/l-top_menu-v2/glyph.svg"}`
                ],
                formatDate(e.updated_at),
                e.translation.title,
                `${e.last_episode} / ${base_anime.base[e.shikimori_id].duration}`,
                e.link

            );
            if (!base_anime.translation) base_anime.translation = [];
            if (!base_anime.translation.includes(e.translation.title)) base_anime.translation.push(e.translation.title);
            // console.log()
            // console.log(e)
            document.body.appendChild(card);
        }

    });
    console.log(base_anime.translation)
    localStorage.setItem('BaseAnime', JSON.stringify(base_anime));

</script>

</html>