<!DOCTYPE html>
<html lang="ru" data-bs-theme="dark">

<head>
    <!-- Yandex.Metrika counter -->
    <script type="text/javascript">
        (function (m, e, t, r, i, k, a) {
            m[i] = m[i] || function () { (m[i].a = m[i].a || []).push(arguments) };
            m[i].l = 1 * new Date();
            for (var j = 0; j < document.scripts.length; j++) { if (document.scripts[j].src === r) { return; } }
            k = e.createElement(t), a = e.getElementsByTagName(t)[0], k.async = 1, k.src = r, a.parentNode.insertBefore(k, a)
        })
            (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

        ym(97169372, "init", {
            clickmap: true,
            trackLinks: true,
            accurateTrackBounce: true,
            webvisor: true
        });
    </script>
    <noscript>
        <div><img src="https://mc.yandex.ru/watch/97169372" style="position:absolute; left:-9999px;" alt="" /></div>
    </noscript>
    <!-- /Yandex.Metrika counter -->


    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
        integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js"
        integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy"
        crossorigin="anonymous"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <!-- <title>Track Anime</title> -->
    <link rel="icon" type="image/x-icon" href="./favicon.png">



    <!-- Primary Meta Tags -->
    <title>Track Anime By ДугДуг</title>

    <meta name="title" content="Track Anime By ДугДуг">
    <meta name="description"
        content="Сервис для просмотра аниме и отслеживания выхода новых серий в реальном времени. Для связи со мной можно писать в мой discord: .dygdyg">
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://dygdyg.github.io/DygDygWEB/TrackAnime/">
    <meta property="og:title" content="Track Anime By ДугДуг">
    <meta property="og:description"
        content="Сервис для просмотра аниме и отслеживания выхода новых серий в реальном времени. Для связи со мной можно писать в мой discord: .dygdyg">
    <meta property="og:image" content="https://dygdyg.github.io/DygDygWEB/TrackAnime/favicon.png">
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image">
    <meta property="twitter:url" content="https://dygdyg.github.io/DygDygWEB/TrackAnime/">
    <meta property="twitter:title" content="Track Anime By ДугДуг">
    <meta property="twitter:description"
        content="Сервис для просмотра аниме и отслеживания выхода новых серий в реальном времени. Для связи со мной можно писать в мой discord: .dygdyg">
    <meta property="twitter:image" content="https://dygdyg.github.io/DygDygWEB/TrackAnime/favicon.png">

</head>

<body>
    <div class="input-group mb-3"><input id="search_input" class="form-control" aria-describedby="emailHelp"
            placeholder="Поиск аниме"></input>
        <div class="input-group-append">
            <button type="button" class="btn btn-secondary" id="VoiceButtonMenu">Озвучки</button>
        </div>
    </div>
    </div>

    <div class="progress loading" id="loading">
        <div class="progress-bar" id="loading-bar" role="progressbar" style="width: 0;" aria-valuenow="0"
            aria-valuemin="0" aria-valuemax="100">0%</div>
    </div>
    <dib class="anime_list" id="list_history"></dib>
    <dib class="anime_list hide" id="list_serch"></dib>

    <!-- ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
    <dialog id="VoiceSettings">
        <!-- <button type="button" class="btn btn-secondary" id="closeDialogButton">X</button> -->
    </dialog>

    <dialog id="VideoPlayerAnime">
        <iframe id="VideoPlayer" allowfullscreen="" allow="autoplay *; fullscreen *"></iframe>
        <button type="button" class="btn btn-secondary" id="closeDialogButton">X</button>
    </dialog>
</body>
<style>
    button.btn.btn-primary.mt-3 {
        width: 100%;
    }

    .anime_list {
        width: 100%;
        height: 100%;
        /* position: absolute; */
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        margin-top: 45px;
        margin-bottom: 20px;
    }

    .input-group.mb-3 {
        width: 100%;
        z-index: 10000;
        position: fixed;
        top: 0px;
    }

    .loading {
        width: 100%;
        z-index: 10000;
        position: fixed;
        bottom: 0px;
    }

    .hide {
        display: none;
    }


    #closeDialogButton {
        position: absolute;
        right: 6px;
        top: 6px;
        width: 45px;
        height: 45px;

    }

    dialog#VideoPlayerAnime {
        padding: 0;
        width: 80%;
        height: 80%;
        border-radius: 12px;
        border-width: thin;
        border-color: #6d757d;

    }

    dialog::backdrop {
        background-color: rgba(0, 0, 0, 0.5);
    }

    iframe#VideoPlayer {
        position: absolute;
        width: 100%;
        height: 100%;
        border: none;
        margin: 0;
        padding: 0;
        overflow: hidden;
        aspect-ratio: 16 / 9;
    }

    p {
        margin: 0;
    }

    body {
        background-color: rgb(66, 66, 66);
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

    .card-title {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .card-img-top {
        width: 100%;
        height: 495px;
        object-fit: cover;
    }

    .card {
        border: solid;
        border-color: rgba(255, 0, 0, 0);
    }

    .card:hover {
        border-color: rgb(201, 201, 201);
        background-color: rgb(75, 75, 75) !important;
    }

    .AniLibria\.TV {
        color: rgb(250, 145, 145);
    }

    .DreamCast {
        color: rgb(136, 255, 255)
    }

    .AniStar {
        color: rgb(251, 73, 251);
    }

    .AnimeVost {
        color: rgb(101, 214, 101);
    }

    .AniDubOnline {
        color: rgb(214, 161, 101);
    }

    .SHIZAProject {
        color: rgb(118, 101, 214);
    }

    .JAM {
        color: rgb(214, 101, 101);
    }
</style>
<script>
    var data, dat, targetFrame
    var ignoreVoice = false
    var HistoryIsActivy = true
    const VideoPlayerAnime = document.getElementById('VideoPlayerAnime');
    const VoiceSettings = document.getElementById('VoiceSettings');
    const VideoPlayer = document.getElementById('VideoPlayer');
    const URLSearch = "https://kodikapi.com/search?token=45c53578f11ecfb74e31267b634cc6a8&title="
    var URLList = "https://kodikapi.com/list?limit=100&token=45c53578f11ecfb74e31267b634cc6a8"
    const voice = [
        "AniStar",
        "Dream Cast",
        "AnimeVost",
        "AniDub Online",
        "AniDUB",
        "JAM",
        "AniLibria.TV",
        "SHIZA Project",
    ]

    document.getElementById('VoiceButtonMenu').addEventListener('click', () => {
        VoiceSettingsMenu()
    })

    document.getElementById('search_input').addEventListener('change', (e) => {
        // console.log(e.target.value)
        GetKodi(encodeURI(e.target.value))
    })


    closeDialogButton.addEventListener('click', () => {
        VideoPlayerAnime.close();
        VideoPlayer.contentWindow.location.href = "https://ya.ru";

    });


    window.onscroll = function () {
        if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight && HistoryIsActivy == true) {
            // console.log("Вы достигли конца страницы!");
            GetKodi();
        }
    };

    var base_anime = localStorage.getItem('BaseAnime')
    if (base_anime) {
        base_anime = JSON.parse(base_anime)
    } else {
        base_anime = { "base": {} }
        // console.log(JSON.stringify({}))
    }
    if (!base_anime.base) {
        localStorage.setItem('BaseAnime', JSON.stringify({ "base": {} }));
        location.reload();
    }
    // console.log(base_anime)
    // VoiceSettingsMenu()
    function VoiceSettingsMenu() {
        const checkboxList = document.getElementById('checkbox-list');
        const buttonContainer = document.getElementById('button-container');

        base_anime.translation.forEach((voice, index) => {
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.id = `voice-${index}`;
            checkbox.className = 'form-check-input';
            checkbox.checked = base_anime.translationActive.includes(voice);

            const checkboxLabel = document.createElement('label');
            checkboxLabel.htmlFor = `voice-${index}`;
            checkboxLabel.className = 'form-check-label';
            checkboxLabel.textContent = voice;

            const checkboxDiv = document.createElement('div');
            checkboxDiv.className = 'form-check';
            checkboxDiv.appendChild(checkbox);
            checkboxDiv.appendChild(checkboxLabel);

            checkbox.checked ? VoiceSettings.prepend(checkboxDiv) : VoiceSettings.appendChild(checkboxDiv);
        });

        const saveButton = document.createElement('button');
        saveButton.type = 'button';
        saveButton.className = 'btn btn-primary mt-3';
        saveButton.textContent = 'Сохранить';
        VoiceSettings.prepend(saveButton)
        saveButton.addEventListener('click', () => {
            base_anime.translationActive = [];
            const checkboxes = document.querySelectorAll('.form-check-input');

            checkboxes.forEach((checkbox) => {
                if (checkbox.checked) {
                    base_anime.translationActive.push(checkbox.nextElementSibling.textContent);
                }
            });
            if (base_anime.translationActive.length > 0) localStorage.setItem('BaseAnime', JSON.stringify(base_anime));
            console.log('base_anime.translationActive:', base_anime.translationActive);
            VoiceSettings.innerHTML = ""
            VoiceSettings.close()
            location.reload();
        });

        VoiceSettings.showModal()

    }
    function httpGet(theUrl) {
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open("GET", theUrl, false); // false for synchronous request
        xmlHttp.send("https://shikimori.one/assets/layouts/l-top_menu-v2/glyph.svg");
        return xmlHttp;
    }
    function createCard(title, description, screenshots, releaseDate, translator, seriesNumber, url_video) {
        const card = document.createElement('div');
        card.classList.add('card', 'bg-dark', 'text-white');
        card.style.width = '22rem';
        card.addEventListener("click", (event) => {
            console.log(url_video)
            dialog(url_video)
        })

        const imgTop = document.createElement('img');
        imgTop.src = screenshots[0];
        imgTop.classList.add('card-img-top');
        imgTop.alt = 'Скриншот 1';
        card.appendChild(imgTop);

        const cardBody = document.createElement('div');
        cardBody.classList.add('card-body');

        const cardTitle = document.createElement('h5');
        cardTitle.classList.add('card-title');
        cardTitle.textContent = title;
        cardTitle.title = title;
        cardBody.appendChild(cardTitle);

        const cardText = document.createElement('p');
        cardText.classList.add('card-text');
        cardText.innerHTML = description;
        cardBody.appendChild(cardText);

        const cardReleaseDate = document.createElement('p');
        cardReleaseDate.classList.add('card-text');
        cardReleaseDate.textContent = `Дата выхода: ${releaseDate}`;
        cardBody.appendChild(cardReleaseDate);

        const cardTranslator = document.createElement('p');
        cardTranslator.classList.add('card-text');
        cardTranslator.classList.add(translator.replaceAll(/\s/g, ''));
        cardTranslator.textContent = `Перевод: ${translator}`;
        cardBody.appendChild(cardTranslator);

        const cardSeriesNumber = document.createElement('p');
        cardSeriesNumber.classList.add('card-text');
        cardSeriesNumber.textContent = `Номер серии: ${seriesNumber}`;
        cardBody.appendChild(cardSeriesNumber);

        const row1 = document.createElement('div');
        row1.classList.add('row');
        const col1 = document.createElement('div');
        col1.classList.add('col');

        if (screenshots[1]) {
            const img1 = document.createElement('img');
            img1.src = screenshots[1];
            img1.classList.add('img-fluid');
            img1.alt = 'Скриншот 2';
            col1.appendChild(img1);
        }
        const col2 = document.createElement('div');
        col2.classList.add('col');
        if (screenshots[2]) {
            const img2 = document.createElement('img');
            img2.src = screenshots[2];
            img2.classList.add('img-fluid');
            img2.alt = 'Скриншот 3';
            col2.appendChild(img2);
        }
        row1.appendChild(col1);
        row1.appendChild(col2);
        cardBody.appendChild(row1);
        const row2 = document.createElement('div');
        row2.classList.add('row');
        const col3 = document.createElement('div');
        col3.classList.add('col');

        if (screenshots[3]) {
            const img3 = document.createElement('img');
            img3.src = screenshots[3];
            img3.classList.add('img-fluid');
            img3.alt = 'Скриншот 4';
            col3.appendChild(img3);
        }
        const col4 = document.createElement('div');
        col4.classList.add('col');

        if (screenshots[4]) {
            const img4 = document.createElement('img');
            img4.src = screenshots[4];
            img4.classList.add('img-fluid');
            img4.alt = 'Скриншот 5';
            col4.appendChild(img4);
        }
        row2.appendChild(col3);
        row2.appendChild(col4);
        cardBody.appendChild(row2);

        card.appendChild(cardBody);
        return card;
    }
    function formatDate(isoDateString) {
        var days = {}
        days.name = ["Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота"];
        const date = new Date(isoDateString);

        days.day = String(date.getDate()).padStart(2, '0');
        days.month = String(date.getMonth() + 1).padStart(2, '0');
        days.year = date.getFullYear();
        days.hours = String(date.getHours()).padStart(2, '0');
        days.minutes = String(date.getMinutes()).padStart(2, '0');
        days.seconds = String(date.getSeconds()).padStart(2, '0');
        days.dayOfWeek = String(date.getDay()).padStart(2, '0');
        // console.log(days.dayOfWeek, days.name)
        return days, `${days.day}.${days.month}.${days.year} ${days.hours}:${days.minutes}:${days.seconds}  ${days.name[Number(days.dayOfWeek)]}`;
    }
    function dialog(url) {
        VideoPlayerAnime.showModal();
        VideoPlayer.contentWindow.location.href = url
    }
    function VoiceTranslate(name) {

        if (base_anime.translationActive) {
            return base_anime.translationActive.includes(name)
        } else {
            base_anime.translationActive = voice;
            return voice.includes(name)
        }


    }

    function GetKodi(seartch) {
        if (!seartch || seartch == undefined || seartch == "") {
            HistoryIsActivy = true
            ignoreVoice = false
            document.getElementById('list_history').classList.add("hide")
            targetFrame = document.getElementById('list_serch')
            targetFrame.classList.remove("hide")
            console.log(1234)
            dat = JSON.parse(httpGet(URLList).response)
            URLList = dat.next_page
            // document.getElementById('list_history')

        } else {
            HistoryIsActivy = false
            ignoreVoice = true
            targetFrame = document.getElementById('list_history')
            targetFrame.classList.remove("hide")
            targetFrame.innerHTML = ""
            document.getElementById('list_serch').classList.add("hide")
            dat = JSON.parse(httpGet(`${URLSearch}${seartch}`).response)
            console.log(dat)
        }
        data = dat.results

        // const data = JSON.parse(httpGet("test.json").response).results
        // console.log(data)
        ScanBase(data, 0);
        return seartch
    }
    // console.log(base_anime.base)
    GetKodi()



    // GetKodiScan(data)

    function ScanBase(e, i) {
        document.getElementById("loading-bar").classList.remove("hide");
        var t = 0
        if (i >= e.length) {
            GetKodiScan(data)
            document.getElementById("loading-bar").classList.add("hide");
            localStorage.setItem('BaseAnime', JSON.stringify(base_anime));
            if (window.innerHeight >= document.body.scrollHeight && HistoryIsActivy) {
                GetKodi()
            }
            return;
        }
        const prog = `${i}%`
        document.getElementById("loading-bar").style.width = prog
        document.getElementById("loading-bar").textContent = prog
        // console.log(prog)

        if ((e[i].type == 'anime-serial') && e[i].translation.type == "voice" && (VoiceTranslate(e[i].translation.title) || ignoreVoice == true)) {
            if (!base_anime.base[e[i].shikimori_id] || base_anime.base[e[i].shikimori_id].screenshots[0] == undefined) {
                t = 500
                base_anime.base[e[i].shikimori_id] = JSON.parse(httpGet(`https://shikimori.one/api/animes/${e[i].shikimori_id}`).response)
                // JSON.stringify(base_anime)
            }
        }
        // console.log(base_anime.base)
        // console.log(base_anime.base[e[i].shikimori_id])

        setTimeout(() => {
            ScanBase(e, i + 1);
        }, t);
    }

    function GetKodiScan(data) {
        data.forEach(e => {

            if ((e.type == 'anime-serial') && e.translation.type == "voice") {
                if (VoiceTranslate(e.translation.title)) {
                    if (!base_anime.base[e.shikimori_id] || base_anime.base[e.shikimori_id].screenshots[0] == undefined) {
                        base_anime.base[e.shikimori_id] = JSON.parse(httpGet(`https://shikimori.one/api/animes/${e.shikimori_id}`).response)
                        JSON.stringify(base_anime)
                        localStorage.setItem('BaseAnime', JSON.stringify(base_anime));
                        // console.log(base_anime.base[e.shikimori_id])
                    }


                    const dat = new Date(e.updated_at)

                    const card = createCard(
                        base_anime.base[e.shikimori_id].russian,
                        "",
                        [
                            // e.screenshots[0],
                            `https://shikimori.one/${base_anime.base[e.shikimori_id].image.original}`,
                            `https://shikimori.one/${base_anime.base[e.shikimori_id].screenshots[0]?.preview || "assets/layouts/l-top_menu-v2/glyph.svg"}`,
                            `https://shikimori.one/${base_anime.base[e.shikimori_id].screenshots[1]?.preview || "assets/layouts/l-top_menu-v2/glyph.svg"}`
                        ],
                        formatDate(e.updated_at),
                        e.translation.title,
                        `${e.last_episode} / ${base_anime.base[e.shikimori_id].duration}`,
                        e.link

                    );
                    targetFrame.appendChild(card);
                }
                if (!base_anime.translation) base_anime.translation = [];
                if (!base_anime.translationActive) base_anime.translationActive = voice;
                if (!base_anime.translation.includes(e.translation.title)) base_anime.translation.push(e.translation.title);

                // base_anime.translationActive.push(e.translation.title);

                // console.log()
                // console.log(e)


                // document.body.appendChild(card);
            }

        });
    }
    // console.log(base_anime.translation)
    localStorage.setItem('BaseAnime', JSON.stringify(base_anime));

</script>

</html>