<!DOCTYPE html>
<html lang="ru" data-bs-theme="dark">

<head>
    <!-- Yandex.Metrika counter -->
    <script type="text/javascript">
        (function (m, e, t, r, i, k, a) {
            m[i] = m[i] || function () { (m[i].a = m[i].a || []).push(arguments) };
            m[i].l = 1 * new Date();
            for (var j = 0; j < document.scripts.length; j++) { if (document.scripts[j].src === r) { return; } }
            k = e.createElement(t), a = e.getElementsByTagName(t)[0], k.async = 1, k.src = r, a.parentNode.insertBefore(k, a)
        })
            (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

        ym(97169372, "init", {
            clickmap: true,
            trackLinks: true,
            accurateTrackBounce: true,
            webvisor: true
        });
    </script>
    <noscript>
        <div><img src="https://mc.yandex.ru/watch/97169372" style="position:absolute; left:-9999px;" alt="" /></div>
    </noscript>
    <!-- /Yandex.Metrika counter -->


    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
        integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js"
        integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy"
        crossorigin="anonymous"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <!-- <title>Track Anime</title> -->
    <link rel="icon" type="image/x-icon" href="./favicon.png">


    <script src="../scripts/moment.js"></script>
    <script src="../scripts/moment-with-locales.js"></script>

    <!-- Primary Meta Tags -->
    <title>Track Anime By ДугДуг</title>

    <meta name="title" content="Track Anime By ДугДуг">
    <meta name="description"
        content="Сервис для просмотра аниме и отслеживания выхода новых серий в реальном времени. Для связи со мной можно писать в мой discord: .dygdyg">
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://dygdyg.github.io/DygDygWEB/TrackAnime/">
    <meta property="og:title" content="Track Anime By ДугДуг">
    <meta property="og:description"
        content="Сервис для просмотра аниме и отслеживания выхода новых серий в реальном времени. Для связи со мной можно писать в мой discord: .dygdyg">
    <meta property="og:image" content="https://dygdyg.github.io/DygDygWEB/TrackAnime/favicon.png">
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image">
    <meta property="twitter:url" content="https://dygdyg.github.io/DygDygWEB/TrackAnime/">
    <meta property="twitter:title" content="Track Anime By ДугДуг">
    <meta property="twitter:description"
        content="Сервис для просмотра аниме и отслеживания выхода новых серий в реальном времени. Для связи со мной можно писать в мой discord: .dygdyg">
    <meta property="twitter:image" content="https://dygdyg.github.io/DygDygWEB/TrackAnime/favicon.png">

</head>

<body>
    <div class="input-group mb-3"><input id="search_input" class="form-control" aria-describedby="emailHelp"
            placeholder="Поиск аниме"></input>
        <div class="input-group-append">
            <button type="button" class="btn btn-secondary" id="VoiceButtonMenu">Озвучки</button>
        </div>
    </div>
    </div>

    <div class="progress loading" id="loading">
        <div class="progress-bar" id="loading-bar" role="progressbar" style="width: 0;" aria-valuenow="0"
            aria-valuemin="0" aria-valuemax="100">0%</div>
    </div>
    <dib class="anime_list" id="list_history"></dib>
    <dib class="anime_list hide" id="list_serch"></dib>

    <!-- ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
    <dialog id="VoiceSettings">
        <!-- <button type="button" class="btn btn-secondary" id="closeDialogButton">X</button> -->
    </dialog>

    <dialog id="VideoPlayerAnime">
        <div id="DialogVideoInfo">
            <div id="VideoInfo"></div>
            <button type="button" id="VideoInfoBtn" class="VideoInfoBtn btn btn-secondary">▼ Вниз ▼<br>▲ Вверх ▲</button>
            <iframe id="VideoPlayer" allowfullscreen="" allow="autoplay *; fullscreen *"></iframe>
        </div>
        <button type="button" class="btn btn-secondary" id="closeDialogButton">X</button>

    </dialog>
</body>
<style>
    .card-fav {
        border-style: solid;
        border-width: 0.3rem 0rem 0.3rem 0.3rem;
        border-color: #ffffff00;
        visibility: hidden;
        position: absolute;
        right: 0;
        width: 3rem;
        /* height: 4rem; */
        top: 33%;
        background-color: #353434bd;
        padding: 0px 17px 0px 17px;
        border-radius: 25px 0px 0px 25px;
        font-size: 2.2rem;
        z-index: 2;
        cursor: pointer;

    }

    .card-fav:hover {
        border-color: #ffffff;
    }

    button.btn.btn-primary.mt-3 {
        width: 100%;
    }

    .anime_list {
        width: 100%;
        height: 100%;
        /* position: absolute; */
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        margin-top: 45px;
        margin-bottom: 20px;
    }

    .input-group.mb-3 {
        width: 100%;
        z-index: 10000;
        position: fixed;
        top: 0px;
    }

    .loading {
        width: 100%;
        z-index: 10000;
        position: fixed;
        bottom: 0px;
    }

    .hide {
        display: none;
    }

    .new_cart {
        border-color: #1008b6 !important;
    }


    #closeDialogButton {
        position: absolute;
        right: 6px;
        top: 6px;
        width: 45px;
        height: 45px;


    }

    dialog#VideoPlayerAnime {
        padding: 0;
        width: 80%;
        /* height: 80%; */
        border-radius: 12px;
        border-width: thin;
        border-color: #6d757d;
        aspect-ratio: 16 / 9;
        overflow-y: hidden;

    }

    dialog::backdrop {
        background-color: rgba(0, 0, 0, 0.5);
    }

    .DialogVideoInfoScroll {
        top: 0% !important;
    }


    #DialogVideoInfo {
        position: absolute;
        width: 100%;
        height: 200%;
        top: -100%;
        transition: top 1s ease;
    }


    iframe#VideoPlayer {
        position: absolute;
        width: 100%;
        height: 50%;
        border: none;
        margin: 0;
        padding: 0;
        overflow: hidden;
        aspect-ratio: 16 / 9;
        top: 50%;

    }

    #VideoInfo {
        position: absolute;
        width: 100%;
        height: 100%;
        border: none;
        margin: 0;
        padding: 0;
        overflow: hidden;
        aspect-ratio: 16 / 9;
        top: 0%;
        transition: top 1s ease;
    }

    .VideoInfoBtn {
        top: 50%;
        left: 40%;
        margin-top: -30px;
        position: absolute;
        z-index: 2;
        width: 20%;
    }

    p {
        margin: 0;
    }

    body {
        background-color: rgb(66, 66, 66);
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }


    .AniLibria\.TV {
        color: rgb(250, 145, 145);
    }

    .Dream\%20Cast {
        color: rgb(136, 255, 255)
    }

    .AniStar {
        color: rgb(251, 73, 251);
    }

    .AnimeVost {
        color: rgb(101, 214, 101);
    }

    .AniDUB,
    .AniDub\%20Online {
        color: rgb(214, 161, 101);
    }

    .SHIZAProject {
        color: rgb(118, 101, 214);
    }

    .JAM {
        color: rgb(214, 101, 101);
    }

    .SHIZA\%20Project {
        color: rgb(101, 214, 180);
    }

    .\%D0\%94\%D1\%83\%D0\%B1\%D0\%BB\%D0\%B8\%D1\%80\%D0\%BE\%D0\%B2\%D0\%B0\%D0\%BD\%D0\%BD\%D1\%8B\%D0\%B9 {
        color: rgb(151, 255, 31);
    }

    .VF-Studio {
        color: rgb(243, 73, 73);
    }


    .card-img-top {
        background-size: cover;
        height: 25rem;
        width: 17rem;
        display: flex;
        flex-direction: column;
        flex-wrap: nowrap;
        justify-content: space-between;

    }

    .card-title {
        background: linear-gradient(180deg, rgb(69, 69, 69, 0.8) 0%, rgba(69, 69, 69, 0.8) 80%, rgba(191, 191, 191, 0) 100%);
        /*background-color: #5d5d5dde; */
        text-align: center;
        padding: 10px 0px 25px 0px;
        visibility: hidden;
        z-index: 2;
        /* height: 125px; */
    }

    .card-voice {
        position: absolute;
        height: 100%;
        writing-mode: vertical-rl;
        padding: 5px;
        text-align: center;
        margin: 0px;
        z-index: 1;
        /* background-color: #5d5d5d99; */
        background: linear-gradient(193deg, rgba(69, 69, 69, 0) 0%, rgba(69, 69, 69, 0.8) 25%, rgba(69, 69, 69, 0.8) 75%, rgba(69, 69, 69, 0) 100%);
    }

    .card-time {
        /* background-color: #5d5d5dde; */
        background: linear-gradient(0deg, rgb(69, 69, 69, 0.8) 0%, rgba(69, 69, 69, 0.8) 80%, rgba(191, 191, 191, 0) 100%);
        padding: 25px 0px 10px 0px;
        text-align: center;
        margin: 0px;
        padding: 5px;
        z-index: 2;

    }

    .card-series {
        position: absolute;
        right: 0px;
        background-color: #353434bd;
        padding: 0px 15px 7px 18px;
        border-radius: 0px 0px 0px 20px;
        font-size: 2.2rem;
        z-index: 1;
    }


    .card {
        border-color: rgba(0, 0, 0, 0);
        /* border-color: rgb(255, 255, 255); */
        overflow: hidden;
        border-radius: 15px;
        border-style: solid;
        border-width: 0.3rem;
        margin: 5px;
    }

    .card:hover {
        border-color: rgb(255, 255, 255);

        .card-title,
        .card-fav {
            visibility: visible;
        }

    }
</style>
<script>
    var data, dat, targetFrame, endid, endid2, prev_page

    var ignoreVoice = false
    moment.locale('ru');
    var HistoryIsActivy = true
    var url_get = new URL(window.location.href)
    const KeyTab = Math.floor(Math.random() * 10000000000)
    const VideoPlayerAnime = document.getElementById('VideoPlayerAnime');
    const VoiceSettings = document.getElementById('VoiceSettings');
    const VideoPlayer = document.getElementById('VideoPlayer');
    const URLSearch = "https://kodikapi.com/search?token=45c53578f11ecfb74e31267b634cc6a8&with_material_data=true&title="
    var URLList = "https://kodikapi.com/list?limit=100&with_material_data=true&token=45c53578f11ecfb74e31267b634cc6a8"
    var URLListStart = "https://kodikapi.com/list?limit=100&with_material_data=true&token=45c53578f11ecfb74e31267b634cc6a8"
    Notification.requestPermission()
    const voice = [
        "AniStar",
        "Dream Cast",
        "AnimeVost",
        "AniDub Online",
        "AniDUB",
        "JAM",
        "AniLibria.TV",
        "SHIZA Project",
    ]

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    setInterval(() => {
        if (!HistoryIsActivy) return
        GetKodi("", true)
        // console.log("scan")
    }, 30 * 1000);  //Автопроверка 
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    document.getElementById('VoiceButtonMenu').addEventListener('click', () => {
        VoiceSettingsMenu()
    })

    document.getElementById('search_input').addEventListener('change', (e) => {
        // console.log(e.target.value)
        GetKodi(encodeURI(e.target.value))
    })

    // document.body.addEventListener("wheel", (e) => {
    //     console.log(e.deltaY)
    //     if (e.deltaY > 0) {
    //         document.getElementById('DialogVideoInfo').classList.add("DialogVideoInfoScroll")
    //     }
    //     if (e.deltaY < 0) {
    //         document.getElementById('DialogVideoInfo').classList.remove("DialogVideoInfoScroll")
    //     }
    // });
    document.getElementById("VideoInfoBtn").addEventListener('click', () => {
        let DialogVideoInfo = document.getElementById('DialogVideoInfo')
        DialogVideoInfo.classList.contains('DialogVideoInfoScroll') ? DialogVideoInfo.classList.remove("DialogVideoInfoScroll") : DialogVideoInfo.classList.add("DialogVideoInfoScroll")
        // if(DialogVideoInfo.classList.contains('DialogVideoInfoScroll'))
        // {

        // }else{

        // }
    })

    function getRandomInt(max) {
        return Math.floor(Math.random() * max);
    }

    closeDialogButton.addEventListener('click', () => {
        VideoPlayerAnime.close();
        VideoPlayer.contentWindow.location.href = "../index.htm";


    });
    VideoPlayerAnime.addEventListener("close", () => {
        document.title = "Track Anime By ДугДуг"
    });


    window.onscroll = function () {
        if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight && HistoryIsActivy == true) {
            // console.log("Вы достигли конца страницы!");
            GetKodi();
        }
    };

    var base_anime = localStorage.getItem('BaseAnime')
    if (base_anime) {
        base_anime = JSON.parse(base_anime)
    } else {
        base_anime = { "base": {} }
        // console.log(JSON.stringify({}))
    }
    base_anime.fav = base_anime.fav ? base_anime.fav : []
/*     if (!base_anime.base) {
        localStorage.removeItem('BaseAnime');
        // localStorage.setItem('BaseAnime', JSON.stringify({ "base": {}, "translation":{}, "translationActive":{}}));
        localStorage.setItem('BaseAnime', JSON.stringify({ "base": {} }));
        location.reload();
    } */
    // console.log(base_anime)
    // VoiceSettingsMenu()
    function getCookie(name) {
        var matches = document.cookie.match(new RegExp("(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"));
        return matches ? decodeURIComponent(matches[1]) : undefined;
    }
    async function add_push(e) {
        const perm = await Notification.requestPermission()

        if (!GetFavorite(e.shikimori) && base_anime.fav.length > 0) return

        if (perm != "granted") {

            return
        }
        notification = new Notification(e.title,
            {
                body: `Серия ${e.series} в озвучке ${e.voice}`,
                // tag: e.date.string,
                icon: e.cover,
            })
        notification.addEventListener("click", () => {
            console.log(e)
            e.shift = event.shiftKey
            dialog(e)
            // card.classList.remove("new_cart")
        })

    }

    function SetFavorite(e) {
        base_anime.fav.push(e)
        localStorage.setItem('BaseAnime', JSON.stringify(base_anime));
        return base_anime.fav
    }

    function DeleteFavorite(e) {
        base_anime.fav = base_anime.fav.filter(item => !item.includes(e));
        localStorage.setItem('BaseAnime', JSON.stringify(base_anime));
        return base_anime.fav
    }

    function GetFavorite(e) {
        let result = base_anime.fav.filter(item => item.toLowerCase().includes(e.toLowerCase()));
        if (result.length > 0) {
            return true
        }
        return false
    }
    function VoiceSettingsMenu() {
        const checkboxList = document.getElementById('checkbox-list');
        const buttonContainer = document.getElementById('button-container');

        base_anime.translation.sort().forEach((voice, index) => {
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.id = `voice-${index}`;
            checkbox.className = 'form-check-input';
            checkbox.checked = base_anime.translationActive.includes(voice);

            const checkboxLabel = document.createElement('label');
            checkboxLabel.htmlFor = `voice-${index}`;
            checkboxLabel.className = 'form-check-label';
            checkboxLabel.textContent = voice;
            console.log(voice, encodeURIComponent(voice))
            checkboxLabel.classList.add(encodeURIComponent(voice));

            const checkboxDiv = document.createElement('div');
            checkboxDiv.className = 'form-check';
            checkboxDiv.appendChild(checkbox);
            checkboxDiv.appendChild(checkboxLabel);

            checkbox.checked ? VoiceSettings.prepend(checkboxDiv) : VoiceSettings.appendChild(checkboxDiv);
        });

        const saveButton = document.createElement('button');
        saveButton.type = 'button';
        saveButton.className = 'btn btn-primary mt-3';
        saveButton.textContent = 'Сохранить';
        VoiceSettings.prepend(saveButton)
        saveButton.addEventListener('click', () => {
            base_anime.translationActive = [];
            const checkboxes = document.querySelectorAll('.form-check-input');

            checkboxes.forEach((checkbox) => {
                if (checkbox.checked) {
                    base_anime.translationActive.push(checkbox.nextElementSibling.textContent);
                }
            });
            if (base_anime.translationActive.length > 0) localStorage.setItem('BaseAnime', JSON.stringify(base_anime));
            console.log('base_anime.translationActive:', base_anime.translationActive);
            VoiceSettings.innerHTML = ""
            VoiceSettings.close()
            location.reload();
        });

        VoiceSettings.showModal()

    }
    function httpGet(theUrl) {
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open("GET", theUrl, false); // false for synchronous request
        xmlHttp.send(null);
        return xmlHttp;
    }
    function add_cart(e) {
        const card = document.createElement('div');
        card.classList.add('card', 'bg-dark', 'text-white');
        // card.style.width = '22rem';
        // card.style.height = '22rem';

        card.addEventListener("click", (event) => {
            // console.log(event.shiftKey)
            // if (event.shiftKey) {
            //     console.log(e)
            //     add_push(e)
            //     return
            // }
            // console.log(e.link)
            e.shift = event.shiftKey
            dialog(e)
            card.classList.remove("new_cart")
        })

        const imgTop = document.createElement('div');
        imgTop.style.backgroundImage = `url(${e.cover}`;
        // imgTop.style.height = '22rem';
        imgTop.src = e.cover;
        imgTop.classList.add('card-img-top');
        imgTop.alt = 'cover';
        card.appendChild(imgTop);

        const cardTitle = document.createElement('h5');
        cardTitle.classList.add('card-title');
        cardTitle.textContent = e.title;
        cardTitle.title = e.title;
        imgTop.appendChild(cardTitle);


        const cartTime = document.createElement('h5');
        cartTime.classList.add('card-time');
        cartTime.textContent = e.date.moment.calendar();
        cartTime.title = e.date.moment.calendar();
        imgTop.appendChild(cartTime);

        const cartCal = document.createElement('h5');
        cartCal.classList.add('card-cal');
        // console.log()
        cartCal.textContent = e.date.moment.fromNow();//
        // cartCal.textContent = e.date.name[Number(e.date.dayOfWeek)];//
        cartCal.title = e.date.moment.format('MMMM Do YYYY, HH:mm:ss'); //${days.name[Number(days.dayOfWeek)]}
        // cartCal.title = e.date.name[e.date.dayOfWeek]; //${days.name[Number(days.dayOfWeek)]}
        cartTime.appendChild(cartCal);

        const cartVoice = document.createElement('h5');
        cartVoice.classList.add('card-voice');
        cartVoice.classList.add(encodeURIComponent(e.voice));
        cartVoice.textContent = e.voice;
        cartVoice.title = e.voice;
        imgTop.appendChild(cartVoice);

        const cartSeries = document.createElement('h5');
        cartSeries.classList.add('card-series');
        cartSeries.textContent = e.series;
        cartSeries.title = e.series;
        cartSeries.style.color = e.kp ? "#ffa9a9" : "#ffffff"
        cartSeries.style.color = e.imdb ? "#a9d5ff" : "#ffffff"
        imgTop.appendChild(cartSeries);

        // console.log(1,e)

        const cartFavorite = document.createElement('div');
        cartFavorite.classList.add('card-fav');
        cartFavorite.textContent = "♥";
        cartFavorite.title = e.series;
        imgTop.appendChild(cartFavorite);
        cartFavorite.style.color = GetFavorite(e.shikimori) ? "#ffdd00" : "#ffffff"

        card.addEventListener("mouseover", (ev) => {
            cartFavorite.style.color = GetFavorite(e.shikimori) ? "#ffdd00" : "#ffffff"
        });

        cartFavorite.addEventListener("click", (ev) => {
            ev.stopPropagation();
            // console.log(GetFavorite(e.shikimori))
            if (GetFavorite(e.shikimori)) {
                cartFavorite.style.color = "#ffffff"
                console.log(DeleteFavorite(e.shikimori))
            } else {
                cartFavorite.style.color = "#ffdd00"
                SetFavorite(e.shikimori)
            }
            // cartFavorite.triggers = cartFavorite.triggers ? (!cartFavorite.triggers) : true


            // cartFavorite.style.color = cartFavorite.triggers ? "#ffdd00" : "#ffffff"
            // console.log(cartFavorite.triggers)
        })

        return card
    }

    function formatDate(isoDateString) {
        var days = {}
        var data

        // var moment = moment().locale('ru').utc(isoDateString);
        days.moment = moment.utc(isoDateString)
        // console.log(moment(isoDateString).calendar().locale('ru'))
        days.name = ["Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота"];
        days.name_s = ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"];
        // console.log(isoDateString)
        // data = isoDateString?new Date(isoDateString):new Date()

        if (isoDateString) {
            date = new Date(isoDateString)
        } else {
            date = new Date()
        };

        days.day = String(date.getDate()).padStart(2, '0');
        days.month = String(date.getMonth() + 1).padStart(2, '0');
        days.year = date.getFullYear();
        days.hours = String(date.getHours()).padStart(2, '0');
        days.minutes = String(date.getMinutes()).padStart(2, '0');
        days.seconds = String(date.getSeconds()).padStart(2, '0');
        days.dayOfWeek = Number(String(date.getDay()).padStart(2, '0'));
        // days.string = `${days.day}.${days.month}.${days.year} ${days.hours}:${days.minutes}:${days.seconds} ${days.name_s[Number(days.dayOfWeek)]}`;
        days.string = `${days.moment.calendar()}`
        days.moment_7 = moment.utc(isoDateString)
        // days.moment
        days.moment_7.add(7, 'days')
        // days.str_days = `${days.moment.fromNow()}`
        // console.log(days.dayOfWeek, days.name)
        return days;
    }

    function dialog(e) {
        document.title = `TA: ${e.title}`
        VideoPlayerAnime.showModal();
        console.log(e)
        if ((e.imdb || e.kp) && e.shift) {
            // VideoPlayer.contentWindow.location.href = `//${getRandomInt(999999999999)}.svetacdn.in/Mr1qo9bwHfJQ?imdb_id=${e.imdb}`
            VideoPlayer.contentWindow.location.href = e.kp ? `//dygdyg.github.io/DygDygWEB/svetacdn.htm?loadserv=kinobox&kinopoiskID=${e.kp}` : `//dygdyg.github.io/DygDygWEB/svetacdn.htm?loadserv=kinobox&imdb=${e.imdb}`
            // VideoPlayer.contentWindow.location.href =  `//api.linktodo.ws/embed/imdb/${e.imdb}`
            return
        }
        VideoPlayer.contentWindow.location.href = e.link
    }
    function VoiceTranslate(name) {

        if (ignoreVoice || base_anime.translationActive < 1) return true
        if (base_anime.translationActive) {
            return base_anime.translationActive.includes(name)
        } else {
            base_anime.translationActive = voice;
            return voice.includes(name)
        }


    }
    function GetKodi(seartch, revers) {

        if (!seartch || seartch == undefined || seartch == "") {
            HistoryIsActivy = true
            ignoreVoice = false
            document.getElementById('list_history').classList.add("hide")
            targetFrame = document.getElementById('list_serch')
            targetFrame.classList.remove("hide")
            console.log(dat)
            if (revers) {
                dat = JSON.parse(httpGet(URLListStart).response)
                endid2 = dat.results[0].id
            } else {
                dat = JSON.parse(httpGet(URLList).response)
                URLList = dat.next_page
                endid = endid ? endid : dat.results[0].id
                // console.log(dat.results[0].id)
            }

            url_get = new URL(window.location.href)
            url_get.searchParams.delete("seartch")
            window.history.pushState({}, '', url_get);
            // document.getElementById('list_history')



        } else {
            HistoryIsActivy = false
            ignoreVoice = true
            document.getElementById('search_input').value = decodeURIComponent(seartch)
            targetFrame = document.getElementById('list_history')
            targetFrame.classList.remove("hide")
            targetFrame.innerHTML = ""
            document.getElementById('list_serch').classList.add("hide")
            dat1 = JSON.parse(httpGet(`${URLSearch}${seartch}`).response)
            dat = {}

            dat.results = dat1.results.filter((value, index, self) =>
                index === self.findIndex((t) => (
                    t.shikimori_id === value.shikimori_id
                ))
            );
            // dat = Object.assign({}, dat1); 
            url_get = new URL(window.location.href)
            url_get.searchParams.set("seartch", `${seartch}`)
            window.history.pushState({}, '', url_get);

/*             dat.results.sort((a, b) => {
                let dateA = new Date(a.updated_at);
                let dateB = new Date(b.updated_at);
                return dateB - dateA;
            }); */

            // console.log(dat.results)
        }
        data = dat.results
        prev_page = dat.prev_page

        // const data = JSON.parse(httpGet("test.json").response).results
        // console.log(data)
        // console.log("scan")
        // console.log(dat.prev_page)
        ScanBase(data, 0, revers);
        return seartch
    }
    // console.log(base_anime.base)
    // if(url_get.searchParams.get('seartch')){
    //      GetKodi(url_get.searchParams.get('seartch'))
    // }else{
    //     GetKodi()
    // }
    GetKodi(url_get.searchParams.get('seartch'))



    // GetKodiScan(data)

    function ScanBase(e, i, revers) {
        document.getElementById("loading-bar").classList.remove("hide");
        var t = 0
        if (i >= e.length) {
            GetKodiScan(data, revers)
            document.getElementById("loading-bar").classList.add("hide");
            localStorage.setItem('BaseAnime', JSON.stringify(base_anime));
            if (window.innerHeight >= document.body.scrollHeight && HistoryIsActivy) {
                GetKodi()
            }
            return;
        }
        const prog = `${i}%`
        document.getElementById("loading-bar").style.width = prog
        document.getElementById("loading-bar").textContent = prog
        // console.log(prog)
        // console.log(e[i].type)
/*         if ((e[i].type == 'anime-serial' || e[i].type == "anime") && e[i].translation.type == "voice" && (VoiceTranslate(e[i].translation.title))) {
            if (!base_anime.base[e[i].shikimori_id]) {
                t = 500
                base_anime.base[e[i].shikimori_id] = JSON.parse(httpGet(`https://shikimori.one/api/animes/${e[i].shikimori_id}`).response)
                // JSON.stringify(base_anime)
            }
        } */
        // console.log(base_anime.base)
        // console.log(base_anime.base[e[i].shikimori_id])

        setTimeout(() => {
            ScanBase(e, i + 1, revers);
        }, t);
    }

    function GetKodiScan(data, revers) {
        var t1 = false
        data.forEach(e => {

            if (revers && endid == e.id || t1) {
                // console.log(1, e.id)
                t1 = true
                endid = endid2
                return
            }
            if ((e.type == 'anime-serial' || e.type == "anime") && e.translation.type == "voice") {
                // console.log(endid)

                if (VoiceTranslate(e.translation.title)) {
                    /* if (!base_anime.base[e.shikimori_id]) {
                        base_anime.base[e.shikimori_id] = JSON.parse(httpGet(`https://shikimori.one/api/animes/${e.shikimori_id}`).response)
                        JSON.stringify(base_anime)
                        localStorage.setItem('BaseAnime', JSON.stringify(base_anime));
                        // console.log(base_anime.base[e.shikimori_id])
                    } */


                    const dat = new Date(e.updated_at)

                    // console.log("shikimori", base_anime.base[e.shikimori_id], "kodik", e)
                    console.log(1,e.material_data)
                    if (!e.shikimori_id) return
                    // console.log(e)
                    const e1 = {
                        "title": e.material_data.title,
                        "cover": `${e.material_data.poster_url}`,
                        // "cover": `https://shikimori.one${base_anime.base[e.shikimori_id].image.original}`,
                        "date": formatDate(e.updated_at),
                        // "date": formatDate(base_anime.base[e.shikimori_id].next_episode_at),
                        "voice": e.translation.title,
                        "series": e.episodes_count ? e.episodes_count : "M",
                        "link": e.link,
                        "kp": e.kinopoisk_id,
                        "imdb": e.imdb_id,
                        "shikimori": e.shikimori_id,
                    }
                    const card = add_cart(e1)
                    if (revers && prev_page == null) {
                        targetFrame.prepend(card)
                        card.classList.add("new_cart")
                        add_push(e1)
                    } else {
                        targetFrame.appendChild(card)

                    };


                }
                if (!base_anime.translation) base_anime.translation = [];
                if (!base_anime.translationActive) base_anime.translationActive = voice;
                if (!base_anime.translation.includes(e.translation.title)) base_anime.translation.push(e.translation.title);
            }

        });
    }
    // console.log(base_anime.translation)
    localStorage.setItem('BaseAnime', JSON.stringify(base_anime));

</script>

</html>